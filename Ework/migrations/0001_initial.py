# Generated by Django 5.2 on 2025-04-17 03:12

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Essay",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("raw_text", models.TextField(verbose_name="原始文本")),
                ("processed_text", models.TextField(verbose_name="处理后文本")),
                (
                    "language_level",
                    models.CharField(
                        choices=[
                            ("P1", "一年级"),
                            ("P2", "二年级"),
                            ("P3", "三年级"),
                            ("P4", "四年级"),
                            ("P5", "五年级"),
                            ("P6", "六年级"),
                        ],
                        max_length=2,
                        verbose_name="适用年级",
                    ),
                ),
                (
                    "extract_time",
                    models.DateTimeField(auto_now_add=True, verbose_name="提取时间"),
                ),
            ],
            options={
                "db_table": "essays",
            },
        ),
        migrations.CreateModel(
            name="Submission",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "file_type",
                    models.CharField(
                        choices=[("image", "图片"), ("doc", "文档"), ("txt", "文本")],
                        max_length=5,
                        verbose_name="文件类型",
                    ),
                ),
                (
                    "original_file",
                    models.FileField(
                        upload_to="submissions/%Y/%m/%d/", verbose_name="原始文件"
                    ),
                ),
                ("file_size", models.IntegerField(verbose_name="文件大小(KB)")),
                (
                    "upload_time",
                    models.DateTimeField(auto_now_add=True, verbose_name="上传时间"),
                ),
                (
                    "ocr_used",
                    models.BooleanField(default=False, verbose_name="OCR处理"),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "待处理"),
                            ("processing", "处理中"),
                            ("completed", "已完成"),
                            ("failed", "失败"),
                        ],
                        db_index=True,
                        default="pending",
                        max_length=20,
                        verbose_name="处理状态",
                    ),
                ),
            ],
            options={
                "db_table": "submissions",
            },
        ),
        migrations.CreateModel(
            name="Vocabulary",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "word",
                    models.CharField(max_length=50, unique=True, verbose_name="单词"),
                ),
                (
                    "grade_level",
                    models.CharField(
                        choices=[
                            ("P1", "一年级"),
                            ("P2", "二年级"),
                            ("P3", "三年级"),
                            ("P4", "四年级"),
                            ("P5", "五年级"),
                            ("P6", "六年级"),
                        ],
                        max_length=2,
                        verbose_name="适用年级",
                    ),
                ),
                (
                    "part_of_speech",
                    models.CharField(max_length=20, verbose_name="词性"),
                ),
                (
                    "example_usage",
                    models.CharField(max_length=255, verbose_name="示例用法"),
                ),
            ],
            options={
                "db_table": "vocabulary",
            },
        ),
        migrations.CreateModel(
            name="Report",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("html_content", models.TextField(verbose_name="HTML内容")),
                ("json_data", models.JSONField(verbose_name="结构化数据")),
                (
                    "generated_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="生成时间"),
                ),
                (
                    "essay",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="Ework.essay",
                        verbose_name="对应作文",
                    ),
                ),
            ],
            options={
                "db_table": "reports",
            },
        ),
        migrations.CreateModel(
            name="Score",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "total_score",
                    models.DecimalField(
                        decimal_places=1, max_digits=4, verbose_name="总分"
                    ),
                ),
                (
                    "spelling",
                    models.DecimalField(
                        decimal_places=1, max_digits=3, verbose_name="拼写分"
                    ),
                ),
                (
                    "grammar",
                    models.DecimalField(
                        decimal_places=1, max_digits=3, verbose_name="语法分"
                    ),
                ),
                (
                    "cohesion",
                    models.DecimalField(
                        decimal_places=1, max_digits=3, verbose_name="连贯性"
                    ),
                ),
                (
                    "vocabulary",
                    models.DecimalField(
                        decimal_places=1, max_digits=3, verbose_name="词汇分"
                    ),
                ),
                ("comments", models.TextField(verbose_name="综合评价")),
                (
                    "engine_used",
                    models.CharField(max_length=20, verbose_name="分析引擎"),
                ),
                (
                    "essay",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="Ework.essay",
                        verbose_name="对应作文",
                    ),
                ),
            ],
            options={
                "db_table": "scores",
            },
        ),
        migrations.AddField(
            model_name="essay",
            name="submission",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE,
                to="Ework.submission",
                verbose_name="提交记录",
            ),
        ),
        migrations.CreateModel(
            name="SystemLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "log_type",
                    models.CharField(
                        choices=[
                            ("OCR", "OCR处理"),
                            ("AI", "AI分析"),
                            ("SYSTEM", "系统日志"),
                        ],
                        db_index=True,
                        max_length=20,
                        verbose_name="日志类型",
                    ),
                ),
                ("message", models.TextField(verbose_name="日志内容")),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, db_index=True, verbose_name="创建时间"
                    ),
                ),
                (
                    "submission",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="Ework.submission",
                    ),
                ),
            ],
            options={
                "db_table": "system_logs",
            },
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "email",
                    models.EmailField(blank=True, max_length=254, verbose_name="邮箱"),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="创建时间"
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "db_table": "users",
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.AddField(
            model_name="submission",
            name="user",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to=settings.AUTH_USER_MODEL,
                verbose_name="用户",
            ),
        ),
        migrations.CreateModel(
            name="Correction",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "error_type",
                    models.CharField(
                        choices=[
                            ("spelling", "拼写错误"),
                            ("grammar", "语法错误"),
                            ("collocation", "搭配错误"),
                            ("punctuation", "标点错误"),
                        ],
                        max_length=12,
                        verbose_name="错误类型",
                    ),
                ),
                ("start_pos", models.IntegerField(verbose_name="起始位置")),
                ("end_pos", models.IntegerField(verbose_name="结束位置")),
                (
                    "original_text",
                    models.CharField(max_length=255, verbose_name="错误内容"),
                ),
                (
                    "suggestion",
                    models.CharField(max_length=255, verbose_name="修改建议"),
                ),
                ("confidence", models.FloatField(verbose_name="置信度")),
                (
                    "essay",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="Ework.essay",
                        verbose_name="对应作文",
                    ),
                ),
            ],
            options={
                "db_table": "corrections",
                "indexes": [
                    models.Index(
                        fields=["essay", "error_type"],
                        name="corrections_essay_i_5b24ca_idx",
                    )
                ],
            },
        ),
        migrations.AddIndex(
            model_name="user",
            index=models.Index(fields=["username"], name="users_usernam_baeb4b_idx"),
        ),
        migrations.AddIndex(
            model_name="submission",
            index=models.Index(
                fields=["user", "upload_time"], name="submissions_user_id_f58b93_idx"
            ),
        ),
    ]
